<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="resources/css/styles.css">
    <link rel="icon" href="img/UTN_logo_negro.png" type="image/png">
</head>
<body>
    <% if (login) { %>
        <% if(secretaria == 1){ %>
            <!-- Div oculto para contener los datos -->
            <div id="dataContainer" style="display: none;" data-resultados="<%= JSON.stringify(resultados) %>"></div>
            <div class="flex flex-col min-h-screen">
                <!-- Encabezados -->
                <p style="display: none;"><%= secretaria %></p>
                <div class="flex justify-center items-center py-4 shadow-md" style="background-image: linear-gradient(to right, #127cc1, #127cc1);">
                    <div class="text-center">
                        <h1 class="text-lg font-bold mb-1 text-white">Bienvenido</h1>
                        <h1 class="text-xl font-bold mb-1 text-white"><strong><%= nombre %></strong></h1>
                        <h2 class="text-md font-bold mb-4 text-white"><strong><%= nombreSecretaria %></strong></h2>
                    </div>
                    <div class="absolute top-0 right-0 m-4">
                        <img src="img/UTN_logo_negro.png" alt="Imagen" class="h-16 w-16 object-cover">
                    </div>
                </div>
                
                
                <!-- Contenedor principal -->
                <div class="flex min-h-screen">
                    <!-- Botón para desplegar la sidebar en los celulares -->
                    <button id="sidebarToggle" class="block md:hidden bg-blue-700 text-white py-2 px-4">
                        <span class="material-icons">menu</span>
                    </button>
                    
                    <!-- Sidebar -->
                    <nav id="sidebar" class="bg-blue-700 w-64 flex-shrink-0 hidden md:block shadow-md" style="background-image: linear-gradient(to bottom, #127cc1, #fff);">
                        <ul class="py-4">
                            <li>
                                <li><a href="/categorias" class="block py-2 px-4 text-white hover-links">Categorías</a></li>
                                <a href="#" class="block py-2 px-4 text-white hover-links flex justify-between items-center" id="toggleFacturas">
                                    <span>Facturas</span>
                                    <span id="arrowIcon">></span>
                                </a>
                                <ul class="pl-4" id="submenuFacturas" style="display: none;">
                                    <li><a href="/facturas" class="block py-2 px-4 text-white hover-links">Carga de Facturas</a></li>
                                    <li><a href="/facturas-activas" class="block py-2 px-4 text-white hover-links">Facturas Activas</a></li>
                                </ul>
                            </li>
                            <li><a href="/ingresos" class="block py-2 px-4 text-white hover-links">Ingresos</a></li>
                            <li><a href="/analiticas" class="block py-2 px-4 text-white hover-links">Aprobar/Rechazar Facturas</a></li>
                            <li><a href="/fondos-categorias" class="block py-2 px-4 text-white hover-links">Cargar Fondos</a></li>
                            <li><a href="/fondos-disponibles" class="block py-2 px-4 text-white hover-links">Fondos Disponibles</a></li>
                            <li><a href="/logout" class="block py-2 px-4 text-white hover-links">Cerrar Sesión</a></li>
                        </ul>
                    </nav>
            
                    <!-- Contenido principal -->
                    <div class="flex-1">
                        <!-- Contenedor de la tabla -->
                        <div class="container mt-5">
                            <h2 class="text-center">Tabla de Secretarías</h2>
                            <table class="table table-bordered table-striped text-center mt-4">
                                <thead>
                                    <tr class="text-white bgc-tr" >
                                        <th scope="col">SECRETARÍA</th>
                                        <th scope="col">EGRESOS</th>
                                        <th scope="col">INGRESOS</th>
                                        <th scope="col">INGRESO NETO</th>
                                    </tr>
                                </thead>
                                <tbody id="tablaSecretariasBody">
                                    <!-- Los datos de la tabla se generarán acá con el JS de abajo  línea 132 a 178-->
                                </tbody>
                            </table>
                        </div>

                        <!--Tabla de categorías para la secretaría seleccionada-->
                        <div id="tablaCategoriasContainer" class="hidden container mt-5">
                            <table id="tablaCategorias" class="table table-bordered table-striped text-center mt-4">
                                <thead id="tablaCategoriasHead" class="bg-primary text-white">
                                    <!-- Encabezados generados dinámicamente -->
                                </thead>
                                <tbody id="tablaCategoriasBody">
                                    <!-- Filas generadas dinámicamente -->
                                </tbody>
                            </table>
                        </div>

                        

                        <!-- Contenedor para los gráficos de torta -->
                        <div class="container mt-5">
                            <div class="row">
                                <!-- Gráfico torta de egresos para la secretaría seleccionada -->
                                <div id="containerEgresos" class="hidden col-md-6" style="height:400px;"></div>

                                <!-- Gráfico torta para los ingresos de la secretaría seleccionada -->
                                <div id="containerIngresos" class="hidden col-md-6" style="height:400px;"></div>
                            </div>
                        </div>

                        <div class="container mt-5">
                            <div class="row">
                                <!-- Grafico torta para todas las secretarías -->
                                <div id="containerSecretariasPie" class="col-md-6" style="height:400px;"></div>

                                <!-- Gráfico barra que contrapone los ingresos y egresos de cada secretaría-->
                                <div id="containerSecretariasBar" class="col-md-6" style="height:400px; "></div>
                            </div>
                        </div>



                        <!-- Gráfico drilldown -->
                        <div id="containerSecretariasBar2" style="width:100%; height:400px;"></div>

                        <!-- Acá se pone el contenido principal -->
                    </div>
                </div>
            </div>
        <% }else{ %>
            <div class="flex flex-col min-h-screen">
                <!-- Encabezados -->
                <p style="display: none;"><%= secretaria %></p>
                <div class="flex justify-center items-center py-4 shadow-md" style="background-image: linear-gradient(to right, #127cc1, #127cc1);">
                    <div class="text-center">
                        <h1 class="text-lg font-bold mb-1 text-white">Bienvenido</h1>
                        <h1 class="text-xl font-bold mb-1 text-white"><strong><%= nombre %></strong></h1>
                        <h2 class="text-md font-bold mb-4 text-white"><strong><%= nombreSecretaria %></strong></h2>
                    </div>
                </div>
                
                <!-- Contenedor principal -->
                <div class="flex min-h-screen">
                    <!-- Botón para desplegar la sidebar en los celulares -->
                    <button id="sidebarToggle" class="block md:hidden bg-blue-700 text-white py-2 px-4" style="background-image: #127cc1;">
                        <span class="material-icons">menu</span>
                    </button>
                    
                    <!-- Sidebar -->
                    <nav id="sidebar" class="bg-blue-700 w-64 flex-shrink-0 hidden md:block shadow-md" style="background-image: linear-gradient(to bottom, #127cc1, #FFFFFF);">
                        <ul class="py-4">
                            <li><a href="/categorias" class="block py-2 px-4 text-white hover-links">Categorías</a></li>
                            <li><a href="/facturas" class="block py-2 px-4 text-white hover-links">Facturas</a></li>
                            <li><a href="/ingresos" class="block py-2 px-4 text-white hover-links">Ingresos</a></li>
                            <li><a href="/logout" class="block py-2 px-4 text-white hover-links">Cerrar Sesión</a></li>
                        </ul>
                    </nav>
            
                    <!-- Contenido principal -->
                    <div class="flex-1">
                        <!-- Acá se pone el contenido principal -->
                    </div>
                </div>
            </div>
       <% } %>
    <%} else { %>
        <div class="flex justify-center items-center h-screen">
            <div class="text-center">
                <h1 class="text-3xl font-bold mb-4"><strong><%= nombre %></strong></h1>
                <a href="login" class="block px-4 py-2 text-white rounded-md btnIrInicio">Ir a Inicio</a>
            </div>
        </div>
    <% } %> 
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/drilldown.js"></script>
    <script>
        //Script para desplegar la barra en los celulares
        $(document).ready(function(){
            $('#sidebarToggle').click(function(){
                $('#sidebar').toggleClass('hidden');
            });
        });

        //Script para cambiar entre el submenú minimizado y desplegado junto con la flecha ">" "v"
        document.addEventListener("DOMContentLoaded", function() {
            const toggleFacturas = document.getElementById("toggleFacturas");
            const submenuFacturas = document.getElementById("submenuFacturas");
            const arrowIcon = document.getElementById("arrowIcon");

            toggleFacturas.addEventListener("click", function() {
                if (submenuFacturas.style.display === "none") {
                    submenuFacturas.style.display = "block";
                    arrowIcon.textContent = "v";
                } else {
                    submenuFacturas.style.display = "none";
                    arrowIcon.textContent = ">";
                }
            });
        });
    </script>
    <script>


        // Obtenemos los datos del div
        var dataContainer = document.getElementById('dataContainer');
        var resultados = JSON.parse(dataContainer.getAttribute('data-resultados'));
        
        //Reducimos los datos de las secretarias en grupos por cada una de ganancia y perdida
        var datosPorSecretaria = resultados.reduce((acc, item) => {
            if (!acc[item.nombre_secretaria]) {
                acc[item.nombre_secretaria] = { ganancia: 0, perdida: 0 };
            }
            acc[item.nombre_secretaria].ganancia += parseFloat(item.ganancia);
            acc[item.nombre_secretaria].perdida += parseFloat(item.perdida);
            return acc;
        }, {});

        // Obtenemos los nombres de las secretarias y los datos de ganancia y pérdida
        var secretarias = Object.keys(datosPorSecretaria);
        var ganancias = Object.values(datosPorSecretaria).map(data => data.ganancia);
        var perdidas = Object.values(datosPorSecretaria).map(data => data.perdida);


        console.log(datosPorSecretaria)
        
        //Aray para almacenar los datos de ganancias y pérdidas por secretaría
        var datosPorSecretaria = [];

        // Recorremos cada secretaría y agregamos sus datos al array
        for (var i = 0; i < secretarias.length; i++) {
            datosPorSecretaria.push({
                name: secretarias[i],
                y: ganancias[i] + perdidas[i], // Sumamos ganancias y pérdidas para cada secretaría
                ganancias: ganancias[i], // Agregamos las ganancias como propiedad
                perdidas: perdidas[i] // Agregamos las pérdidas como propiedad
            });
        }

        // Creamos el grafico con los datos de cada secretaria
        Highcharts.chart('containerSecretariasPie', {
            chart: {
                type: 'pie' // Es el tipo de grafico
            },
            title: {
                text: 'Ganancias y pérdidas por secretaría'
            },
            tooltip: {
                pointFormat: '<b>{point.name}</b>: <br>Ganancias: {point.ganancias}, Pérdidas: {point.perdidas}' // Formato del tooltip para mostrar ganancias y pérdidas
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: <br>Ganancias: {point.ganancias}, Pérdidas: {point.perdidas}', // Formato de las etiquetas de datos para mostrar ganancias y pérdidas
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                        }
                    }
                }
            },
            series: [{
                name: 'Ganancias y pérdidas',
                colorByPoint: true,
                data: datosPorSecretaria // Utilizamos los datos agrupados por secretaría
            }],
            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        legend: {
                            layout: 'horizontal',
                            align: 'center',
                            verticalAlign: 'bottom'
                        }
                    }
                }]
            }
        });

        //Tabla para secretarias//
        // Variable para almacenar la última secretaría seleccionada
        var ultimaSecretariaSeleccionada = null;
        var contenedoresSecretariasOcultos = false;

        // Función para generar las filas de la tabla
        function generarFilas(resultados) {
            var tbody = $('#tablaSecretariasBody');

            // Objeto para almacenar los egresos e ingresos por secretaría
            var resumenPorSecretaria = {};

            // Iteramos sobre los resultados y sumamos egresos e ingresos por secretaría
            $.each(resultados, function(index, resultado) {
                var perdida = parseFloat(resultado.perdida) || 0; // Validar y parsear pérdida
                var ganancia = parseFloat(resultado.ganancia) || 0; // Validar y parsear ganancia

                if (resumenPorSecretaria[resultado.nombre_secretaria]) {
                    resumenPorSecretaria[resultado.nombre_secretaria].egresos += perdida;
                    resumenPorSecretaria[resultado.nombre_secretaria].ingresos += ganancia;
                } else {
                    resumenPorSecretaria[resultado.nombre_secretaria] = {
                        egresos: perdida,
                        ingresos: ganancia
                    };
                }
            });

            // Función para formatear los números del monto
            function formatearMoneda(numero) {
                return '$' + numero.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,').replace('.', ',');
            }

            // Pegamos limpiada del el contenido existente de la tabla
            tbody.empty();

            // Se itera sobre el objeto resumenPorSecretaria y generar una fila por cada secretaría
            $.each(resumenPorSecretaria, function(secretaria, resumen) {
                var total = resumen.ingresos - resumen.egresos;

                var row = $('<tr>');

                // Se convierte el nombre de la secretaría un enlace
                $.each(resumenPorSecretaria, function(secretaria, resumen) {
                var total = resumen.ingresos - resumen.egresos;

                var row = $('<tr>');

                // Se convierte el nombre de la secretaría un enlace
                var link = $('<a href="#">').text(secretaria).on('click', function(e) {
                    e.preventDefault();

                    // Verificamos si la misma secretaría está seleccionada
                    if (ultimaSecretariaSeleccionada === secretaria) {
                        $('#tablaCategoriasContainer').toggleClass('hidden');
                        $('#containerEgresos').toggleClass('hidden');
                        $('#containerIngresos').toggleClass('hidden');
                        
                        // Alternar visibilidad de los contenedores de gráficos de secretarías
                        $('#containerSecretariasPie').toggleClass('hidden');
                        $('#containerSecretariasBar').toggleClass('hidden');
                        $('#containerSecretariasBar2').toggleClass('hidden');
                    } else {
                        // Ocultar los contenedores de gráficos de secretarías
                        if (!contenedoresSecretariasOcultos) {
                            $('#containerSecretariasPie').addClass('hidden');
                            $('#containerSecretariasBar').addClass('hidden');
                            $('#containerSecretariasBar2').addClass('hidden');
                            contenedoresSecretariasOcultos = true;
                        }

                        // Llamamos a la función para actualizar los gráficos con la secretaría seleccionada
                        actualizarGraficoEgresosPorSecretaria(secretaria);
                        actualizarGraficoIngresosPorSecretaria(secretaria);
                        // Llamamos a la función para generar la tabla de categorías
                        generarTablaCategorias(secretaria, resultados);

                        // Mostrar los contenedores de categorías, egresos e ingresos
                        $('#tablaCategoriasContainer').removeClass('hidden');
                        $('#containerEgresos').removeClass('hidden');
                        $('#containerIngresos').removeClass('hidden');
                    }

                    // Actualizar la última secretaría seleccionada
                    ultimaSecretariaSeleccionada = secretaria;
                });

                row.append($('<td>').append(link));
                row.append($('<td>').text(formatearMoneda(resumen.egresos)));
                row.append($('<td>').text(formatearMoneda(resumen.ingresos)));
                row.append($('<td>').text(formatearMoneda(total)));

                $('#tablaSecretariasBody').append(row);
            });

                $('<td>').append(link).appendTo(row);
                $('<td>').text(formatearMoneda(resumen.egresos)).appendTo(row); // Formatear número
                $('<td>').text(formatearMoneda(resumen.ingresos)).appendTo(row);// Formatear número
                $('<td>').text(formatearMoneda(total)).appendTo(row); // Formatear número

                tbody.append(row);
            });
        }

        // Función para generar la tabla de categorías para una secretaría seleccionada
        function generarTablaCategorias(secretaria, resultados) {
            var tbody = $('#tablaCategoriasBody');
            var thead = $('#tablaCategoriasHead');

            // Se filtra los datos para obtener solo los relacionados con la secretaría seleccionada
            var datosSecretaria = resultados.filter(item => item.nombre_secretaria === secretaria);

            // Objeto para almacenar los egresos e ingresos por categoría
            var resumenPorCategoria = {};

            // Iteramos sobre los datos filtrados y sumar egresos e ingresos por categoría
            $.each(datosSecretaria, function(index, resultado) {
                var perdida = parseFloat(resultado.perdida) || 0; // Validar y parsear pérdida
                var ganancia = parseFloat(resultado.ganancia) || 0; // Validar y parsear ganancia

                if (resumenPorCategoria[resultado.nombre_categoria]) {
                    resumenPorCategoria[resultado.nombre_categoria].egresos += perdida;
                    resumenPorCategoria[resultado.nombre_categoria].ingresos += ganancia;
                } else {
                    resumenPorCategoria[resultado.nombre_categoria] = {
                        egresos: perdida,
                        ingresos: ganancia
                    };
                }
            });

            // Se limpia el contenido existente de la tabla
            tbody.empty();
            thead.empty();

            // Generamos el encabezado de la tabla
            var headerRow = $('<tr>');
            $('<th scope="col">').text(secretaria).appendTo(headerRow);
            $('<th scope="col">').text('Egresos').appendTo(headerRow);
            $('<th scope="col">').text('Ingresos').appendTo(headerRow);
            $('<th scope="col">').text('Ingreso Neto').appendTo(headerRow);
            thead.append(headerRow);

            // Función para formatear los números como moneda
            function formatearMoneda(numero) {
                return '$' + numero.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,').replace('.', ',');
            }

            // Iterar sobre el objeto resumenPorCategoria y generar una fila por cada categoría
            $.each(resumenPorCategoria, function(categoria, resumen) {
                var total = resumen.ingresos - resumen.egresos;

                var row = $('<tr>');

                $('<td>').text(categoria).appendTo(row);
                $('<td>').text(formatearMoneda(resumen.egresos)).appendTo(row);
                $('<td>').text(formatearMoneda(resumen.ingresos)).appendTo(row);
                $('<td>').text(formatearMoneda(total)).appendTo(row);

                tbody.append(row);
            });
        }

        // Función para obtener los datos de egresos de una secretaría para el gráfico de torta
        function obtenerDatosParaPieChart(secretaria, resultados) {
            const datosSecretaria = resultados.filter(item => item.nombre_secretaria === secretaria && parseFloat(item.perdida) > 0);
            const egresosPorCategoria = {};

            datosSecretaria.forEach(item => {
                const categoria = item.nombre_categoria;
                const egresos = parseFloat(item.perdida);

                if (egresosPorCategoria[categoria]) {
                    egresosPorCategoria[categoria] += egresos;
                } else {
                    egresosPorCategoria[categoria] = egresos;
                }
            });

            const dataParaPieChart = Object.keys(egresosPorCategoria).map(categoria => ({
                name: categoria,
                y: egresosPorCategoria[categoria]
            }));

            return dataParaPieChart;
        }

        // Función para obtener los datos de ingresos de una secretaría para el gráfico de torta
        function obtenerDatosParaPieChartIngresos(secretaria, resultados) {
            const datosSecretaria = resultados.filter(item => item.nombre_secretaria === secretaria && parseFloat(item.ganancia) > 0);
            const ingresosPorCategoria = {};

            datosSecretaria.forEach(item => {
                const categoria = item.nombre_categoria;
                const ingresos = parseFloat(item.ganancia);

                if (ingresosPorCategoria[categoria]) {
                    ingresosPorCategoria[categoria] += ingresos;
                } else {
                    ingresosPorCategoria[categoria] = ingresos;
                }
            });

            const dataParaPieChart = Object.keys(ingresosPorCategoria).map(categoria => ({
                name: categoria,
                y: ingresosPorCategoria[categoria]
            }));

            return dataParaPieChart;
        }

        // Función para actualizar el gráfico de egresos por secretaría
        function actualizarGraficoEgresosPorSecretaria(secretaria) {
            const datosSecretaria = obtenerDatosParaPieChart(secretaria, resultados);

            Highcharts.chart('containerEgresos', {
                chart: {
                    type: 'pie'
                },
                title: {
                    text: 'Egresos por categoría para la secretaría de ' + secretaria
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.y}'
                        }
                    }
                },
                series: [{
                    name: 'Egreso',
                    colorByPoint: true,
                    data: datosSecretaria
                }],
                responsive: {
                    rules: [{
                        condition: {
                            maxWidth: 500
                        },
                        chartOptions: {
                            legend: {
                                layout: 'horizontal',
                                align: 'center',
                                verticalAlign: 'bottom'
                            }
                        }
                    }]
                }
            });
        }

        // Función para actualizar el gráfico de ingresos por secretaría
        function actualizarGraficoIngresosPorSecretaria(secretaria) {
            const datosSecretaria = obtenerDatosParaPieChartIngresos(secretaria, resultados);

            Highcharts.chart('containerIngresos', {
                chart: {
                    type: 'pie'
                },
                title: {
                    text: 'Ingresos por categoría para la secretaría de ' + secretaria
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.y}'
                        }
                    }
                },
                series: [{
                    name: 'Ingreso',
                    colorByPoint: true,
                    data: datosSecretaria
                }],
                responsive: {
                    rules: [{
                        condition: {
                            maxWidth: 500
                        },
                        chartOptions: {
                            legend: {
                                layout: 'horizontal',
                                align: 'center',
                                verticalAlign: 'bottom'
                            }
                        }
                    }]
                }
            });
        }

        // Esperar a que el DOM esté listo
        $(document).ready(function() {
            // Se obtiene los datos del div oculto
            var resultados = JSON.parse($('#dataContainer').attr('data-resultados'));

            // Llamamos a la función para generar las filas
            generarFilas(resultados);
        });

        
        //Grafico de Barras de secretarias//
        // Función para calcular los egresos por secretaría
        function calcularEgresosPorSecretaria(resultados) {
            return resultados.reduce(function(acc, item) {
                var secretaria = item.nombre_secretaria;
                var egreso = parseFloat(item.perdida) || 0; // Asegurar que se considere 0 si no hay pérdida
                acc[secretaria] = (acc[secretaria] || 0) + egreso;
                return acc;
            }, {});
        }

        // Función para calcular los ingresos por secretaría
        function calcularIngresosPorSecretaria(resultados) {
            return resultados.reduce(function(acc, item) {
                var secretaria = item.nombre_secretaria;
                var ingreso = parseFloat(item.ganancia) || 0; // Asegurar que se considere 0 si no hay ganancia
                acc[secretaria] = (acc[secretaria] || 0) + ingreso;
                return acc;
            }, {});
        }

        // Calculamo los egresos e ingresos por secretaría
        var egresosPorSecretaria = calcularEgresosPorSecretaria(resultados);
        var ingresosPorSecretaria = calcularIngresosPorSecretaria(resultados);

        // Se crea el gráfico de barras
        Highcharts.chart('containerSecretariasBar', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Egresos e ingresos por secretaría'
            },
            xAxis: {
                categories: Object.keys(egresosPorSecretaria) // Se usa las categorías (nombres de las secretarías)
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Monto'
                }
            },
            tooltip: {
                shared: true,
                headerFormat: '<b>{point.x}</b><br/>',
                pointFormat: '{series.name}: ${point.y}<br/>'
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                }
            },
            series: [{
                    pointWidth: 100,
                    name: 'Ingresos',
                    data: Object.keys(ingresosPorSecretaria).map(function(secretaria) {
                        return ingresosPorSecretaria[secretaria] || 0; // Se usan los montos de ingresos acumulados
                    }),
                    color: 'green' 
                }, {
                    pointWidth: 100,
                    name: 'Egresos',
                    data: Object.keys(egresosPorSecretaria).map(function(secretaria) {
                        return egresosPorSecretaria[secretaria] || 0; // Se usan los montos de egresos acumulados
                    }),
                    color: 'red'
                }]
        });

        // Esperamos a que el DOM esté listo
        $(document).ready(function() {
            // Obtenemos los datos del div oculto
            var resultados = JSON.parse($('#dataContainer').attr('data-resultados'));

            // Se llama a la función para generar las filas
            generarFilas(resultados);
        });

        //Gráfico DrillDown
       // Función para aplicar transformación logarítmica a los datos
        function transformarDato(dato) {
            if (dato === 0) return 0; // Manejar el caso de dato igual a 0
            return dato > 0 ? Math.log10(dato) : -Math.log10(Math.abs(dato));
        }

        // Función para revertir transformación logarítmica a los datos
        function revertirTransformacion(datoTransformado) {
            if (datoTransformado === 0) return 0; // Manejar el caso de dato transformado igual a 0
            return datoTransformado > 0 ? Math.pow(10, datoTransformado) : -Math.pow(10, Math.abs(datoTransformado));
        }

        // Función para obtener los datos de una secretaría por categoría
        function obtenerDatosPorCategoria(secretaria, resultados) {
            const datosSecretaria = resultados.filter(item => item.nombre_secretaria === secretaria);
            const datosPorCategoria = {};

            datosSecretaria.forEach(item => {
                const categoria = item.nombre_categoria;
                const egresos = parseFloat(item.perdida) || 0;
                const ingresos = parseFloat(item.ganancia) || 0;

                if (!datosPorCategoria[categoria]) {
                    datosPorCategoria[categoria] = {
                        egresos: 0,
                        ingresos: 0
                    };
                }

                datosPorCategoria[categoria].egresos += egresos;
                datosPorCategoria[categoria].ingresos += ingresos;
            });

            return Object.keys(datosPorCategoria).map(categoria => ({
                name: categoria,
                egresos: datosPorCategoria[categoria].egresos,
                ingresos: datosPorCategoria[categoria].ingresos
            }));
        }

        // Calculamos los egresos e ingresos por secretaría
        var egresosPorSecretaria = calcularEgresosPorSecretaria(resultados);
        var ingresosPorSecretaria = calcularIngresosPorSecretaria(resultados);

        // Creamos la serie de datos principales
        var seriesData = [];
        var drilldownSeries = [];

        Object.keys(egresosPorSecretaria).forEach(secretaria => {
            var ingresoNetoTransformado = transformarDato(ingresosPorSecretaria[secretaria] - egresosPorSecretaria[secretaria]);

            seriesData.push({
                name: secretaria,
                y: ingresoNetoTransformado, // Ingresos netos transformados
                drilldown: secretaria
            });

            var datosPorCategoria = obtenerDatosPorCategoria(secretaria, resultados);

            var categoriaData = datosPorCategoria.map(item => ({
                name: item.name,
                y: transformarDato(item.ingresos - item.egresos), // Transformar la diferencia entre ingresos y egresos
                drilldown: secretaria + '-' + item.name
            }));

            drilldownSeries.push({
                name: secretaria,
                id: secretaria,
                data: categoriaData
            });

            datosPorCategoria.forEach(item => {
                var ingresosData = { name: 'Ingresos', y: transformarDato(item.ingresos), color: 'green' };
                var egresosData = { name: 'Egresos', y: transformarDato(-item.egresos), color: 'red' }; // Egresos negativos transformados
                drilldownSeries.push({
                    name: item.name,
                    id: secretaria + '-' + item.name,
                    data: [ingresosData, egresosData]
                });
            });
        });

        // Creamos el gráfico de barras con drilldown
        Highcharts.chart('containerSecretariasBar2', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Ingresos y Egresos por Secretaría con Detalle de Categorías'
            },
            xAxis: {
                type: 'category'
            },
            yAxis: {
                title: {
                    text: 'Monto'
                },
                plotLines: [{
                    color: 'black', // Color de la línea
                    width: 2, // Grosor de la línea
                    value: 0, // Posición de la línea
                    zIndex: 5 // Asegura que la línea esté por encima de las barras
                }],
                labels: {
                    formatter: function() {
                        if (this.value === 0) return '0';
                        const value = revertirTransformacion(this.value);
                        if (Math.abs(value) >= 1e6) {
                            return (value / 1e6).toFixed(1) + 'M';
                        } else if (Math.abs(value) >= 1e3) {
                            return (value / 1e3).toFixed(1) + 'K';
                        }
                        return value.toFixed(2); // Revertir la transformación para mostrar los valores originales
                    }
                }
            },
            legend: {
                enabled: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0,
                    pointWidth: 100 // Valor para hacer las columnas más finas
                },
                series: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        formatter: function() {
                            const value = revertirTransformacion(this.y);
                            if (Math.abs(value) >= 1e6) {
                                return '$' + (value / 1e6).toFixed(1) + 'M';
                            } else if (Math.abs(value) >= 1e3) {
                                return '$' + (value / 1e3).toFixed(1) + 'K';
                            }
                            return '$' + value.toFixed(2); // Revertir la transformación para mostrar los valores originales
                        }
                    }
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>${point.y:,.2f}</b><br/>',
                formatter: function() {
                    const value = revertirTransformacion(this.y);
                    return '<span style="font-size:11px">' + this.series.name + '</span><br>' +
                        '<span style="color:' + this.point.color + '">' + this.point.name + '</span>: <b>$' + value.toFixed(2) + '</b><br/>';
                }
            },
            series: [{
                name: 'Secretarías',
                colorByPoint: true,
                data: seriesData
            }],
            drilldown: {
                series: drilldownSeries
            }
        });
    </script>
</body>
</html>
