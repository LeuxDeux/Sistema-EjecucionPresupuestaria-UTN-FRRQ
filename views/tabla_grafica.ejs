<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabla Gráfica</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
     <!-- Div oculto para contener los datos -->
     <div id="dataContainer" style="display: none;" data-resultados="<%= JSON.stringify(resultados) %>"></div>

      <!-- Contenedor de la tabla -->
    <div class="container mt-5">
        <h2 class="text-center">Tabla de Secretarías</h2>
        <table class="table table-bordered table-striped text-center mt-4">
            <thead>
                <tr class="bg-primary text-white">
                    <th scope="col">SECRETARÍA</th>
                    <th scope="col">EGRESOS</th>
                    <th scope="col">INGRESOS</th>
                    <th scope="col">INGRESO NETO</th>
                </tr>
            </thead>
            <tbody id="tablaSecretariasBody">
                <!-- Los datos de la tabla se generarán acá con el JS de abajo  línea 132 a 178-->
            </tbody>
        </table>
    </div>

     <!-- Grafico torta para todas las secretarías -->
    <div id="containerSecretariasPie" style="width:100%; height:400px;"></div>

    <!-- Grafico torta de egresos para la secretaría seleccionada -->
    <div id="containerEgresos" style="width:100%; height:400px;"></div>

    <!-- Gráfico torta para los ingresos de la secretaría seleccionada -->
    <div id="containerIngresos" style="width:100%; height:400px;"></div>

    <!-- Gráfico drilldown -->
    <div id="containerSecretariasBar2" style="width:100%; height:400px;"></div>

    <!-- Gráfico barra que contrapone los ingresos y egresos de cada secretaría-->
    <div id="containerSecretariasBar" style="width:100%; height:400px;"></div>
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/drilldown.js"></script>
    <script>


        // Obtenemos los datos del div
        var dataContainer = document.getElementById('dataContainer');
        var resultados = JSON.parse(dataContainer.getAttribute('data-resultados'));
        
        //Reducimos los datos de las secretarias en grupos por cada una de ganancia y perdida
        var datosPorSecretaria = resultados.reduce((acc, item) => {
            if (!acc[item.nombre_secretaria]) {
                acc[item.nombre_secretaria] = { ganancia: 0, perdida: 0 };
            }
            acc[item.nombre_secretaria].ganancia += parseFloat(item.ganancia);
            acc[item.nombre_secretaria].perdida += parseFloat(item.perdida);
            return acc;
        }, {});

        // Obtenemos los nombres de las secretarias y los datos de ganancia y pérdida
        var secretarias = Object.keys(datosPorSecretaria);
        var ganancias = Object.values(datosPorSecretaria).map(data => data.ganancia);
        var perdidas = Object.values(datosPorSecretaria).map(data => data.perdida);


        console.log(datosPorSecretaria)
        
        //Aray para almacenar los datos de ganancias y pérdidas por secretaría
        var datosPorSecretaria = [];

        // Recorremos cada secretaría y agregamos sus datos al array
        for (var i = 0; i < secretarias.length; i++) {
            datosPorSecretaria.push({
                name: secretarias[i],
                y: ganancias[i] + perdidas[i], // Sumamos ganancias y pérdidas para cada secretaría
                ganancias: ganancias[i], // Agregamos las ganancias como propiedad
                perdidas: perdidas[i] // Agregamos las pérdidas como propiedad
            });
        }

        // Creamos el grafico con los datos de cada secretaria
        Highcharts.chart('containerSecretariasPie', {
            chart: {
                type: 'pie' // Es el tipo de grafico
            },
            title: {
                text: 'Ganancias y pérdidas por secretaría'
            },
            tooltip: {
                pointFormat: '<b>{point.name}</b>: <br>Ganancias: {point.ganancias}, Pérdidas: {point.perdidas}' // Formato del tooltip para mostrar ganancias y pérdidas
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: <br>Ganancias: {point.ganancias}, Pérdidas: {point.perdidas}', // Formato de las etiquetas de datos para mostrar ganancias y pérdidas
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                        }
                    }
                }
            },
            series: [{
                name: 'Ganancias y pérdidas',
                colorByPoint: true,
                data: datosPorSecretaria // Utilizamos los datos agrupados por secretaría
            }],
            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        legend: {
                            layout: 'horizontal',
                            align: 'center',
                            verticalAlign: 'bottom'
                        }
                    }
                }]
            }
        });

        //Tabla para secretarias//
        // Función para generar las filas de la tabla
        function generarFilas(resultados) {
            var tbody = $('#tablaSecretariasBody');

            // Objeto para almacenar los egresos e ingresos por secretaría
            var resumenPorSecretaria = {};

            // Iteramos sobre los resultados y sumamos egresos e ingresos por secretaría
            $.each(resultados, function(index, resultado) {
                var perdida = parseFloat(resultado.perdida) || 0; // Validar y parsear pérdida
                var ganancia = parseFloat(resultado.ganancia) || 0; // Validar y parsear ganancia

                if (resumenPorSecretaria[resultado.nombre_secretaria]) {
                    resumenPorSecretaria[resultado.nombre_secretaria].egresos += perdida;
                    resumenPorSecretaria[resultado.nombre_secretaria].ingresos += ganancia;
                } else {
                    resumenPorSecretaria[resultado.nombre_secretaria] = {
                        egresos: perdida,
                        ingresos: ganancia
                    };
                }
            });

            // Pegamos limpiada del el contenido existente de la tabla
            tbody.empty();

            // Se itera sobre el objeto resumenPorSecretaria y generar una fila por cada secretaría
            $.each(resumenPorSecretaria, function(secretaria, resumen) {
                var total = resumen.ingresos - resumen.egresos;

                var row = $('<tr>');

                // Se convierte el nombre de la secretaría un enlace
                var link = $('<a href="#">').text(secretaria).on('click', function(e) {
                    e.preventDefault();
                    // Llamamos a la función para actualizar los gráficos con la secretaría seleccionada
                    actualizarGraficoEgresosPorSecretaria(secretaria);
                    actualizarGraficoIngresosPorSecretaria(secretaria);
                });

                $('<td>').append(link).appendTo(row);
                $('<td>').text(resumen.egresos.toLocaleString()).appendTo(row); // Formatear número
                $('<td>').text(resumen.ingresos.toLocaleString()).appendTo(row); // Formatear número
                $('<td>').text(total.toLocaleString()).appendTo(row); // Formatear número

                tbody.append(row);
            });
        }
        //Función Egresos//
        // Función para obtener los datos de egresos de una secretaría para el gráfico de torta
        function obtenerDatosParaPieChart(secretaria, resultados) {
            const datosSecretaria = resultados.filter(item => item.nombre_secretaria === secretaria && parseFloat(item.perdida) > 0);
            const egresosPorCategoria = {};

            datosSecretaria.forEach(item => {
                const categoria = item.nombre_categoria;
                const egresos = parseFloat(item.perdida);

                if (egresosPorCategoria[categoria]) {
                    egresosPorCategoria[categoria] += egresos;
                } else {
                    egresosPorCategoria[categoria] = egresos;
                }
            });

            const dataParaPieChart = Object.keys(egresosPorCategoria).map(categoria => ({
                name: categoria,
                y: egresosPorCategoria[categoria]
            }));

            return dataParaPieChart;
        }

        //Función Ingresos
        // Función para obtener los datos de ingresos de una secretaría para el gráfico de torta
        function obtenerDatosParaPieChartIngresos(secretaria, resultados) {
            const datosSecretaria = resultados.filter(item => item.nombre_secretaria === secretaria && parseFloat(item.ganancia) > 0);
            const ingresosPorCategoria = {};

            datosSecretaria.forEach(item => {
                const categoria = item.nombre_categoria;
                const ingresos = parseFloat(item.ganancia);

                if (ingresosPorCategoria[categoria]) {
                    ingresosPorCategoria[categoria] += ingresos;
                } else {
                    ingresosPorCategoria[categoria] = ingresos;
                }
            });

            const dataParaPieChart = Object.keys(ingresosPorCategoria).map(categoria => ({
                name: categoria,
                y: ingresosPorCategoria[categoria]
            }));

            return dataParaPieChart;
        }

        //Torta Egresos de Secretaría
        // Función para actualizar el gráfico de egresos por secretaría
        function actualizarGraficoEgresosPorSecretaria(secretaria) {
            const datosSecretaria = obtenerDatosParaPieChart(secretaria, resultados);

            Highcharts.chart('containerEgresos', {
                chart: {
                    type: 'pie'
                },
                title: {
                    text: 'Egresos por categoría para la secretaría de ' + secretaria
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.y}'
                        }
                    }
                },
                series: [{
                    name: 'Egreso',
                    colorByPoint: true,
                    data: datosSecretaria
                }],
                responsive: {
                    rules: [{
                        condition: {
                            maxWidth: 500
                        },
                        chartOptions: {
                            legend: {
                                layout: 'horizontal',
                                align: 'center',
                                verticalAlign: 'bottom'
                            }
                        }
                    }]
                }
            });
        }
        
        //Torta Ingresos de Ssecretaría
        // Función para actualizar el gráfico de ingresos por secretaría
        function actualizarGraficoIngresosPorSecretaria(secretaria) {
            const datosSecretaria = obtenerDatosParaPieChartIngresos(secretaria, resultados);

            Highcharts.chart('containerIngresos', {
                chart: {
                    type: 'pie'
                },
                title: {
                    text: 'Ingresos por categoría para la secretaría de ' + secretaria
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.y}'
                        }
                    }
                },
                series: [{
                    name: 'Ingreso',
                    colorByPoint: true,
                    data: datosSecretaria
                }],
                responsive: {
                    rules: [{
                        condition: {
                            maxWidth: 500
                        },
                        chartOptions: {
                            legend: {
                                layout: 'horizontal',
                                align: 'center',
                                verticalAlign: 'bottom'
                            }
                        }
                    }]
                }
            });
        }

        // Esperar a que el DOM esté listo
        $(document).ready(function() {
            // Se obtiene los datos del div oculto
            var resultados = JSON.parse($('#dataContainer').attr('data-resultados'));

            // Llamamos a la función para generar las filas
            generarFilas(resultados);
        });

        
        //Grafico de Barras de secretarias//
        // Función para calcular los egresos por secretaría
        function calcularEgresosPorSecretaria(resultados) {
            return resultados.reduce(function(acc, item) {
                var secretaria = item.nombre_secretaria;
                var egreso = parseFloat(item.perdida) || 0; // Asegurar que se considere 0 si no hay pérdida
                acc[secretaria] = (acc[secretaria] || 0) + egreso;
                return acc;
            }, {});
        }

        // Función para calcular los ingresos por secretaría
        function calcularIngresosPorSecretaria(resultados) {
            return resultados.reduce(function(acc, item) {
                var secretaria = item.nombre_secretaria;
                var ingreso = parseFloat(item.ganancia) || 0; // Asegurar que se considere 0 si no hay ganancia
                acc[secretaria] = (acc[secretaria] || 0) + ingreso;
                return acc;
            }, {});
        }

        // Se calcula los egresos e ingresos por secretaría
        var egresosPorSecretaria = calcularEgresosPorSecretaria(resultados);
        var ingresosPorSecretaria = calcularIngresosPorSecretaria(resultados);

        // Se crea el gráfico de barras
        Highcharts.chart('containerSecretariasBar', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Egresos e ingresos por secretaría'
            },
            xAxis: {
                categories: Object.keys(egresosPorSecretaria) // Se usa las categorías (nombres de las secretarías)
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Monto'
                }
            },
            tooltip: {
                shared: true,
                headerFormat: '<b>{point.x}</b><br/>',
                pointFormat: '{series.name}: ${point.y}<br/>'
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                }
            },
            series: [{
                    name: 'Ingresos',
                    data: Object.keys(ingresosPorSecretaria).map(function(secretaria) {
                        return ingresosPorSecretaria[secretaria] || 0; // Se usan los montos de ingresos acumulados
                    }),
                    color: 'green' 
                }, {
                    name: 'Egresos',
                    data: Object.keys(egresosPorSecretaria).map(function(secretaria) {
                        return egresosPorSecretaria[secretaria] || 0; // Se usan los montos de egresos acumulados
                    }),
                    color: 'red'
                }]
        });

        // Esperamos a que el DOM esté listo
        $(document).ready(function() {
            // Obtenemos los datos del div oculto
            var resultados = JSON.parse($('#dataContainer').attr('data-resultados'));

            // Se llama a la función para generar las filas
            generarFilas(resultados);
        });

        //Gráfico DrillDown
        // Función para calcular los egresos por secretaría
        function calcularEgresosPorSecretaria(resultados) {
            return resultados.reduce(function(acc, item) {
                var secretaria = item.nombre_secretaria;
                var egreso = parseFloat(item.perdida);
                acc[secretaria] = (acc[secretaria] || 0) + egreso;
                return acc;
            }, {});
        }

        // Función para calcular los ingresos por secretaría
        function calcularIngresosPorSecretaria(resultados) {
            return resultados.reduce(function(acc, item) {
                var secretaria = item.nombre_secretaria;
                var ingreso = parseFloat(item.ganancia);
                acc[secretaria] = (acc[secretaria] || 0) + ingreso;
                return acc;
            }, {});
        }

        // Función para obtener los datos de una secretaría por categoría
        function obtenerDatosPorCategoria(secretaria, resultados) {
            const datosSecretaria = resultados.filter(item => item.nombre_secretaria === secretaria);
            const datosPorCategoria = {};

            datosSecretaria.forEach(item => {
                const categoria = item.nombre_categoria;
                const egresos = parseFloat(item.perdida);
                const ingresos = parseFloat(item.ganancia);

                if (!datosPorCategoria[categoria]) {
                    datosPorCategoria[categoria] = {
                        egresos: 0,
                        ingresos: 0
                    };
                }

                datosPorCategoria[categoria].egresos += egresos;
                datosPorCategoria[categoria].ingresos += ingresos;
            });

            return Object.keys(datosPorCategoria).map(categoria => ({
                name: categoria,
                egresos: datosPorCategoria[categoria].egresos,
                ingresos: datosPorCategoria[categoria].ingresos
            }));
        }

        // Calculamos los egresos e ingresos por secretaría
        var egresosPorSecretaria = calcularEgresosPorSecretaria(resultados);
        var ingresosPorSecretaria = calcularIngresosPorSecretaria(resultados);

        // Creamos la serie de datos principales
        var seriesData = [];
        var drilldownSeries = [];

        Object.keys(egresosPorSecretaria).forEach(secretaria => {
            seriesData.push({
                name: secretaria,
                y: ingresosPorSecretaria[secretaria] - egresosPorSecretaria[secretaria], // Ingresos netos
                drilldown: secretaria
            });

            var datosPorCategoria = obtenerDatosPorCategoria(secretaria, resultados);

            var categoriaData = datosPorCategoria.map(item => ({
                name: item.name,
                y: item.ingresos - item.egresos, // Se muestra la diferencia entre ingresos y egresos
                drilldown: secretaria + '-' + item.name
            }));

            drilldownSeries.push({
                name: secretaria,
                id: secretaria,
                data: categoriaData
            });

            datosPorCategoria.forEach(item => {
                var ingresosData = { name: 'Ingresos', y: item.ingresos, color: 'green' };
                var egresosData = { name: 'Egresos', y: item.egresos, color: 'red' };
                drilldownSeries.push({
                    name: item.name,
                    id: secretaria + '-' + item.name,
                    data: [ingresosData, egresosData]
                });
            });
        });

        // Crear el gráfico de barras con drilldown
        Highcharts.chart('containerSecretariasBar2', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Ingresos y Egresos por Secretaría con Detalle de Categorías'
            },
            xAxis: {
                type: 'category'
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Monto'
                }
            },
            legend: {
                enabled: true
            },
            plotOptions: {
                series: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        format: '${point.y:.1f}'
                    }
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>${point.y:.2f}</b><br/>'
            },
            series: [{
                name: 'Secretarías',
                colorByPoint: true,
                data: seriesData
            }],
            drilldown: {
                series: drilldownSeries
            }
        });
    </script>
</body>
</html>